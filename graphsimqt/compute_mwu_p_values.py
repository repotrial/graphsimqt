import pandas as pd
import scipy.stats as sps
import argparse
import json
from progress.spinner import Spinner
import warnings
from pathlib import Path
from typing import Dict, Set, List, Union
from graphsimqt.utils.compute_adjusted_p_values import compute_adjusted_p_values
from graphsimqt.utils.get_result_directory_path import get_result_directory_path


def _compute_mwu_p_value(local_distances: pd.DataFrame, selection: pd.Series) -> float:
    x = local_distances[selection & ~local_distances['permuted']]['distance'].to_numpy()
    y = local_distances[selection & local_distances['permuted']]['distance'].to_numpy()
    try:
        _, mwu_p_value = sps.mannwhitneyu(x=x, y=y, alternative='less')
    except ValueError:
        return 1.0
    return mwu_p_value


def _compute_global_mwu_p_values(result_directory_name: str, silent: bool):
    if not silent:
        spinner = Spinner('Computing global MWU p-values. ')
        spinner.next()
    result_dir_path = get_result_directory_path(result_directory_name)
    path_to_local_distances = result_dir_path.joinpath('local_distances.csv')
    local_distances = pd.read_csv(str(path_to_local_distances))
    distance_types = list(set(local_distances['distance_type']))
    p_values = {'distance_type': [], 'p_value': []}
    for distance_type in distance_types:
        if not silent:
            spinner.next()
        selection = (local_distances['distance_type'] == distance_type)
        p_values['distance_type'].append(distance_type)
        p_values['p_value'].append(_compute_mwu_p_value(local_distances, selection))
    p_values = pd.DataFrame(data=p_values)
    path_to_global_p_values = result_dir_path.joinpath('global_mwu_p_values.csv')
    p_values.to_csv(str(path_to_global_p_values), index=False)
    if not silent:
        spinner.finish()
        print(f'Saved global MWU p-values to {str(path_to_global_p_values)}.')


def _compute_node_set_mwu_p_values(result_directory_name: str, node_sets: Dict[str, Set[str]], variable_name: str,
                                   adjust_method: str, silent: bool):
    if not silent:
        spinner = Spinner(f'Computing {variable_name} MWU p-values. ')
        spinner.next()
    result_dir_path = get_result_directory_path(result_directory_name)
    path_to_local_distances = result_dir_path.joinpath('local_distances.csv')
    local_distances = pd.read_csv(str(path_to_local_distances))
    distance_types = list(set(local_distances['distance_type']))
    p_values = {'distance_type': [], 'p_value': [], variable_name: []}
    for node_set_name, node_set in node_sets.items():
        for distance_type in distance_types:
            if not silent:
                spinner.next()
            selection = (local_distances['distance_type'] == distance_type) & (local_distances['node'].isin(node_set))
            p_values['distance_type'].append(distance_type)
            p_values[variable_name].append(node_set_name)
            p_values['p_value'].append(_compute_mwu_p_value(local_distances, selection))
    p_values = pd.DataFrame(data=p_values)
    compute_adjusted_p_values(p_values, adjust_method)
    if not silent:
        spinner.next()
    path_to_gene_set_p_values = result_dir_path.joinpath(f'{variable_name}_mwu_p_values.csv')
    p_values.to_csv(str(path_to_gene_set_p_values), index=False)
    if not silent:
        spinner.finish()
        print(f'Saved {variable_name} MWU p-values to {str(path_to_gene_set_p_values)}.')


def compute_mwu_p_values(result_directory_name: str, paths_to_node_sets: List[Union[str, Path]] = [],
                         adjust_method: str = 'holm-sidak', silent: bool = False):
    """Computes MWU p-values and saves them as CSV files.

    Parameters
    ----------
    result_directory_name : str
        Name of the subdirectory of the results/ directory where the results generated by run_permutation_tests.py can
        be found and the p-values should be saved.
    paths_to_node_sets : list of str or pathlib.Path, default: []
        List of paths to node sets files in either JSON or tabular format for which MWU p-values should be computed.
        JSON files are expected to contain named lists of node IDs.
        Tabular files are expected to contain one column named 'node' with the node IDs
        and one or several columns for categorical variables, i.e., partitions of the node IDs.
        For tabular data, the separator is derived from the suffix.
        csv: comma. csv2: semicolon. tsv: tab. 'wsv: whitespace.
    adjust_method : str, default: 'holm-sidak'
        Method used for adjusting the p-values.
        Can be set to any of the methods available in statsmodels.stats.multitest.multipletests().
    silent : bool, default: False
        Set to True to suppress printing progress to stdout.

    """
    _compute_global_mwu_p_values(result_directory_name, silent)
    for path_to_node_sets in paths_to_node_sets:
        if isinstance(path_to_node_sets, str):
            path_to_node_sets = Path(path_to_node_sets)
        supported_formats = {'.graphml', '.csv', '.csv2', '.tsv', '.wsv', '.json'}
        if path_to_node_sets.suffix not in supported_formats:
            warnings.warn(f'Node set file has unsupported format {path_to_node_sets.suffix}. Skipping.\n'
                          f'Supported formats: {", ".join(supported_formats)}.')
            continue
        if path_to_node_sets.suffix == '.json':
            with open(str(path_to_node_sets)) as fp:
                node_sets = {node_set_name: set(node_list) for node_set_name, node_list in json.load(fp).items()}
            _compute_node_set_mwu_p_values(result_directory_name, node_sets, path_to_node_sets.stem, adjust_method,
                                           silent)
        else:
            sep = {'.csv': ',', '.wsv': ' ', '.tsv': '\t', '.csv2': ';'}[path_to_node_sets.suffix]
            permutations = pd.read_csv(str(path_to_node_sets), sep=sep)
            if 'node' not in permutations.columns:
                warnings.warn('Tabular node set file has no column named "node". Skipping.')
                continue
            for column in permutations.columns:
                if column != 'node':
                    node_sets = permutations.groupby(column)['node'].apply(set).to_dict()
                    _compute_node_set_mwu_p_values(result_directory_name, node_sets, column, adjust_method, silent)


if __name__ == '__main__':
    parser = argparse.ArgumentParser('Compute MWU p-values.')
    parser.add_argument('--dirname', type=str, help='Name of the subdirectory of the results/ directory where the '
                                                    'results generated by run_permutation_tests.py can be found and '
                                                    'the p-values should be saved.', required=True)
    parser.add_argument('--adjust', type=str, help='Method used for adjusting the p-values. Can be set to any of the '
                                                   'methods available in statsmodels.stats.multitest.multipletests().',
                        default='holm-sidak')
    parser.add_argument('--silent', action='store_true', help='Set this flag to suppress printing progress to stdout.')
    parser.add_argument('--nodesets', type=Path, help='Paths to node set files in either JSON or tabular format for '
                                                      'which MWU p-values should be computed. JSON files are expected '
                                                      'to contain named lists of node IDs. Tabular files are expected '
                                                      'to contain one column named "node" with the node IDs and one or '
                                                      'several columns for categorical variables, i.e., partitions of '
                                                      'the node IDs. For tabular data, the separator is derived from '
                                                      'the suffix. csv: comma. csv2: semicolon. tsv: tab. wsv: '
                                                      'whitespace.', nargs='+', default=[])
    args = parser.parse_args()
    compute_mwu_p_values(args.dirname, args.nodesets, args.adjust, args.silent)
