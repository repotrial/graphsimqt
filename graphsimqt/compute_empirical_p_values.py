import pandas as pd
import itertools as itt
from pathlib import Path
import argparse
from progress.spinner import Spinner
from progress.bar import IncrementalBar
from graphsimqt.utils.compute_adjusted_p_values import compute_adjusted_p_values
from graphsimqt.utils.get_result_directory_path import get_result_directory_path


def _compute_empirical_p_value(distances: pd.DataFrame, selection: pd.Series):
    true_distance = distances['distance'][selection & ~distances['permuted']].to_numpy()[0]
    num_leq = distances[selection & (distances['distance'] <= true_distance)].shape[0]
    return num_leq / distances[selection].shape[0]


def _compute_global_empirical_p_values(result_directory_name: str, silent: bool):
    if not silent:
        spinner = Spinner('Computating global empirical p-values. ')
        spinner.next()
    result_dir_path = get_result_directory_path(result_directory_name)
    path_to_global_distances = result_dir_path.joinpath('global_distances.csv')
    global_distances = pd.read_csv(str(path_to_global_distances))
    distance_types = list(set(global_distances['distance_type']))
    p_values = {'distance_type': [], 'p_value': []}
    for distance_type in distance_types:
        if not silent:
            spinner.next()
        selection = (global_distances['distance_type'] == distance_type)
        p_values['distance_type'].append(distance_type)
        p_values['p_value'].append(_compute_empirical_p_value(global_distances, selection))
    p_values = pd.DataFrame(data=p_values)
    path_to_global_p_values = result_dir_path.joinpath('global_empirical_p_values.csv')
    p_values.to_csv(str(path_to_global_p_values), index=False)
    if not silent:
        spinner.finish()
        print(f'Saved global empirical p-values to {str(path_to_global_p_values)}.')


def _compute_local_empirical_p_values(result_directory_name: str, adjust_method: str, silent: bool):
    if not silent:
        spinner = Spinner('Preparing computation of local empirical p-values. ')
        spinner.next()
    result_dir_path = get_result_directory_path(result_directory_name)
    path_to_local_distances = result_dir_path.joinpath('local_distances.csv')
    local_distances = pd.read_csv(str(path_to_local_distances))
    distance_types = list(set(local_distances['distance_type']))
    node_ids = list(set(local_distances['node']))
    if not silent:
        spinner.next()
    p_values = {'node': [], 'distance_type': [], 'p_value': []}
    if not silent:
        spinner.finish()
        bar = IncrementalBar('Computing local empirical p-values.', max=len(node_ids) * len(distance_types))
    for node_id, distance_type in itt.product(node_ids, distance_types):
        if not silent:
            bar.next()
        selection = (local_distances['distance_type'] == distance_type) & (local_distances['node'] == node_id)
        p_values['node'].append(node_id)
        p_values['distance_type'].append(distance_type)
        p_values['p_value'].append(_compute_empirical_p_value(local_distances, selection))
    if not silent:
        bar.finish()
        spinner = Spinner('Computing adjusted p-values and saving results. ')
        spinner.next()
    p_values = pd.DataFrame(data=p_values)
    compute_adjusted_p_values(p_values, adjust_method)
    if not silent:
        spinner.next()
    path_to_local_p_values = result_dir_path.joinpath('local_empirical_p_values.csv')
    p_values.to_csv(str(path_to_local_p_values), index=False)
    if not silent:
        spinner.finish()
        print(f'Saved local empirical p-values to {str(path_to_local_p_values)}.')


def compute_empirical_p_values(result_directory_name: str, adjust_method: str = 'holm-sidak', silent: bool = False):
    """Computes empirical p-values and saves them as CSV files.

    Parameters
    ----------
    result_directory_name : str
        Name of the subdirectory of the results/ directory where the results generated by run_permutation_tests.py can
        be found and the p-values should be saved.
    adjust_method : str, default: 'holm-sidak'
        Method used for adjusting the p-values.
        Can be set to any of the methods available in statsmodels.stats.multitest.multipletests().
    silent : bool, default: False
        Set to True to suppress printing progress to stdout.

    """
    _compute_global_empirical_p_values(result_directory_name, silent)
    _compute_local_empirical_p_values(result_directory_name, adjust_method, silent)


if __name__ == '__main__':
    parser = argparse.ArgumentParser('Compute empirical p-values.')
    parser.add_argument('--dirname', type=str, help='Name of the subdirectory of the results/ directory where the '
                                                    'results generated by run_permutation_tests.py can be found and '
                                                    'the p-values should be saved.', required=True)
    parser.add_argument('--adjust', type=str, help='Method used for adjusting the p-values. Can be set to any of the '
                                                   'methods available in statsmodels.stats.multitest.multipletests().',
                        default='holm-sidak')
    parser.add_argument('--silent', action='store_true', help='Set this flag to suppress printing progress to stdout.')
    args = parser.parse_args()
    compute_empirical_p_values(args.dirname, args.adjust, args.silent)
