import scipy.stats as sps
import pandas as pd
import numpy as np
import json
from progress.spinner import Spinner
from graphsimqt.utils.get_directory_paths import get_result_directory_path
from graphsimqt.utils.get_parsers import get_shortest_path_parser


def analyze_shortest_path_distances(result_directory_name: str, silent: bool = False):
    """Analyzes shortest path distances.

    Parameters
    ----------
    result_directory_name : str
        Name of the subdirectory of the results/ directory where the results generated by
        compute_shortest_path_distances.py can be found and the results of the analysis should be saved.
    silent : bool
        Set to True to suppress printing progress to stdout.

    """
    if not silent:
        spinner = Spinner('Analyzing shortest path distances. ')
        spinner.next()
    result_dir_path = get_result_directory_path(result_directory_name)
    path_to_distances = result_dir_path.joinpath('shortest_path_distances.csv')
    distances = pd.read_csv(str(path_to_distances))
    if not silent:
        spinner.next()
    ref_filter = distances['reference_edge']
    x_mwu = distances[ref_filter]['distance'].to_numpy()
    y_mwu = distances[~ref_filter]['distance'].to_numpy()
    _, mwu_p_value = sps.mannwhitneyu(x_mwu, y_mwu, alternative='less')
    if not silent:
        spinner.next()
    distances.fillna(value=0.0, inplace=True)
    inf_filter = (distances['distance'] < np.inf)
    x_slope = distances[inf_filter]['reference_score'].to_numpy()
    y_slope = distances[inf_filter]['distance'].to_numpy()
    slope, _, _, slope_p_value, _ = sps.linregress(x_slope, y_slope)
    if not silent:
        spinner.next()
    results = {'mwu_test': {'p_value': mwu_p_value}, 'slope_test': {'p_value': slope_p_value, 'slope': slope}}
    path_to_results = result_dir_path.joinpath('shortest_path_distance_analysis.json')
    with open(str(path_to_results), 'w') as fp:
        json.dump(results, fp)
    if not silent:
        spinner.finish()
        print(f'Saved analysis of shortest path distances to {str(path_to_results)}.')


if __name__ == '__main__':
    args = get_shortest_path_parser('analyze_shortest_path_distances').parse_args()
    analyze_shortest_path_distances(args.dirname, args.silent)
